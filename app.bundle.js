(()=>{"use strict";var t={};t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),(()=>{var r;t.g.importScripts&&(r=t.g.location+"");var e=t.g.document;if(!r&&e&&(e.currentScript&&(r=e.currentScript.src),!r)){var o=e.getElementsByTagName("script");if(o.length)for(var c=o.length-1;c>-1&&(!r||!/^http(s?):/.test(r));)r=o[c--].src}if(!r)throw new Error("Automatic publicPath is not supported in this browser");r=r.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=r})(),t.p,document.querySelector("body"),t.p,t.p,document.querySelector("body"),document.querySelector("body");document.querySelector("#root").classList.add("min-w-fit","grid","grid-cols-12","grid-rows-12","bg-black","dark:bg-white","text-black","dark:text-white","font-sans")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,